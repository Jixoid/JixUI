Unit MiniJixoid;

{$Mode ObjFpc}{$H+}

Interface

Uses
  Classes, SysUtils, StrUtils, Controls, Graphics, Windows, Registry,
  BCButton, BCComboBox,
  JixPas, Forms;

function Scaling(bForm: TCustomDesignControl; Value: Double): Double;
Procedure FormRadial(Form: TWinControl; Radial: Integer);
Function  GetThemeColor: TColor;
Function GetDarkTheme: boolean;
Procedure ButtonRadialEffect(Button: TBCButton; X, Y: Int32S);
Function FindFontColor(bColor: jARGB): Boolean;

Procedure RePaintButton(Button: TBCButton; Color: jARGB);
Procedure RePaintCombo(Combo: TBCComboBox; Color: jARGB);

Implementation

function Scaling(bForm: TCustomDesignControl; Value: Double): Double;
Begin
  Result:= bForm.PixelsPerInch/96*Value;
end;

Procedure FormRadial(Form: TWinControl; Radial: Integer);
var
  rgn: HRGN;
begin
  With Form do
  Begin
    rgn := CreateRoundRectRgn(0,// x-coordinate of the region's upper-left corner
      0,            // y-coordinate of the region's upper-left corner
      ClientWidth,  // x-coordinate of the region's lower-right corner
      ClientHeight, // y-coordinate of the region's lower-right corner
      Radial,           // height of ellipse for rounded corners
      Radial);          // width of ellipse for rounded corners
    SetWindowRgn(Form.Handle, rgn, True);
  end;
end;

Function GetThemeColor: TColor;
const
  KEYPATH = '\Software\Microsoft\Windows\DWM';
  KEYNAME = 'AccentColor';
var
  Cac: String;
  ColorKey: String;
  Registry: TRegistry;
begin
  //Result:= $555555;
  //Exit;

  Result := $003357FF;
  Registry := TRegistry.Create;
  try
    Registry.RootKey := HKEY_CURRENT_USER;
    if Registry.OpenKeyReadOnly(KEYPATH) then
      begin
        if Registry.ValueExists(KEYNAME) then
          ColorKey := Registry.ReadInteger(KEYNAME).ToHexString
        else
          ColorKey := 'FF3357FF';
      end
    else
      ColorKey := 'FF3357FF';
  finally
    Registry.Free;
  end;

  Cac:= ReverseString(ColorKey);
  SetLength(Cac, Length(Cac)-2);
  Cac:= ReverseString(Cac+'00');

  Result:= StringToColor('$'+Cac);
end;

Procedure ButtonRadialEffect(Button: TBCButton; X, Y: Int32S);
Var
  r: Int8U;
  VarX,
  VarY: Int32S;
begin
  r:= Round(100/Button.Width*20);
  VarX:= Round(X/Button.Width*100);
  VarY:= Round(Y/Button.Height*100);

  Button.StateClicked.Background.Gradient1.Point2XPercent:= VarX-r;
  Button.StateClicked.Background.Gradient1.Point2YPercent:= VarY-r;

  Button.StateClicked.Background.Gradient1.Point1XPercent:= VarX;
  Button.StateClicked.Background.Gradient1.Point1YPercent:= VarY;

  Button.Caption:= VarX.ToString +'/'+ VarY.ToString;
end;

Function GetDarkTheme: boolean;
const
  KEYPATH = '\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize';
  KEYNAME = 'AppsUseLightTheme';
var
  LightKey: boolean;
  Registry: TRegistry;
begin
  Result := True;
  Registry := TRegistry.Create;
  try
    Registry.RootKey := HKEY_CURRENT_USER;
    if Registry.OpenKeyReadOnly(KEYPATH) then
      begin
        if Registry.ValueExists(KEYNAME) then
          LightKey := Registry.ReadBool(KEYNAME)
        else
          LightKey := False;
      end
    else
      LightKey := False;
    Result := not LightKey
  finally
    Registry.Free;
  end;
end;

Function FindFontColor(bColor: jARGB): Boolean;
Var
  i: Integer;
Begin
  i:= 0;
  i+= bColor.Red;
  i+= bColor.Green;
  i+= bColor.Blue;

  if i < 560 then
    Result:= True
  else
    Result:= False;
end;

Procedure RePaintButton(Button: TBCButton; Color: jARGB);
Begin
  Button.StateNormal.Background.Color:= Color;
  Button.StateNormal.Background.Gradient1.StartColor:= Color;
  Button.StateNormal.Background.Gradient1.EndColor:= Color;
  Button.StateNormal.Border.Color:= Color;

  Button.StateHover.Background.Color:= Color;
  Button.StateHover.Background.Gradient1.StartColor:= Color;
  Button.StateHover.Background.Gradient1.EndColor:= Color;
  Button.StateHover.Border.Color:= Color;

  Button.StateClicked.Background.Color:= Color;
  Button.StateClicked.Background.Gradient1.StartColor:= Color;
  Button.StateClicked.Background.Gradient1.EndColor:= Color;
  Button.StateClicked.Border.Color:= Color;
end;

Procedure RePaintCombo(Combo: TBCComboBox; Color: jARGB);
Begin
  Combo.DropDownBorderColor:= Color;
  Combo.DropDownHighlight:= Color;
  Combo.FocusBorderColor:= Color;

  Combo.StateNormal.Background.Color:= Color;
  Combo.StateNormal.Background.Gradient1.StartColor:= Color;
  Combo.StateNormal.Background.Gradient1.EndColor:= Color;
  Combo.StateNormal.Border.Color:= Color;

  Combo.StateHover.Background.Color:= Color;
  Combo.StateHover.Background.Gradient1.StartColor:= Color;
  Combo.StateHover.Background.Gradient1.EndColor:= Color;
  Combo.StateHover.Border.Color:= Color;

  Combo.StateClicked.Background.Color:= Color;
  Combo.StateClicked.Background.Gradient1.StartColor:= Color;
  Combo.StateClicked.Background.Gradient1.EndColor:= Color;
  Combo.StateClicked.Border.Color:= Color;
end;

End.
