unit UnitSelectDirectory;

{$mode ObjFPC}{$H+}

interface

uses
  Classes, SysUtils, Forms, Controls, Graphics, Dialogs, ComCtrls, BCPanel,
  BCButton, BCLabel, StdCtrls, MiniJixoid, FileUtil;

type

  { TFormSelectDirectory }

  TFormSelectDirectory = class(TForm)
    BCButCancel: TBCButton;
    BCButHalt: TBCButton;
    BCButOK: TBCButton;
    BCLabelCaption: TBCLabel;
    BCPanel1: TBCPanel;
    BCPanelEdit: TBCPanel;
    BCPanelMain: TBCPanel;
    EditText: TEdit;
    TreeView1: TTreeView;
    procedure BCButCancelMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure BCButHaltClick(Sender: TObject);
    procedure BCButOKClick(Sender: TObject);
    procedure BCLabelCaptionMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
    procedure FormResize(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Search(Tree: TTreeNode; Locate: String);
    procedure SearchProject;
    procedure TreeView1SelectionChanged(Sender: TObject);
  private

  public

  end;

var
  FormSelectDirectory: TFormSelectDirectory;

Var
  Used: Boolean;
  Path: String;
implementation

{$R *.lfm}

{ TFormSelectDirectory }

Var
  CurX, CurY: Integer;

procedure TFormSelectDirectory.TreeView1SelectionChanged(Sender: TObject);
Var
  C: TTreeNode;
  Cac: String;
begin
  C:= TreeView1.Selected;

  if C <> nil then
  Begin
    Cac:= C.Text;
    C:= C.Parent;

    While C <> nil do
    Begin
      Cac:= C.Text+'\'+Cac;
      C:= C.Parent;
    End;
  end;
  //Cac:= ExtractFilePath(DefaultProjectPath)+Cac;
  EditText.Text:= Cac;
end;

procedure TFormSelectDirectory.Search(Tree: TTreeNode; Locate: String);
Var
  Items, Itemss: TTreeNode;
  Folders, Files: TStrings;
  i,j: Integer;
Begin
  Folders:= FindAllDirectories(Locate, False);
  For i:=0 to Folders.Count-1 do
  Begin
    Items:= Tree.TreeNodes.AddChild(Tree, ExtractFileName(Folders[i]));
    Items.ImageIndex:=1;
    Items.SelectedIndex:=1;
    Search(Items, Folders[i]);
  end;
end;

procedure TFormSelectDirectory.SearchProject;
Var
  Cac: TTreeNode;
  i: Integer;
Begin
  TreeView1.ClearSelection;
  TreeView1.Items.Clear;
  Cac:= TreeView1.Items.Add(nil, ExtractFileName(Path));
  Cac.ImageIndex:=0;
  Cac.SelectedIndex:=0;
  Search(Cac, EditText.Text);
  Cac.Expanded:= True;
end;

procedure TFormSelectDirectory.BCLabelCaptionMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
    if ssLeft in Shift then
  Begin
    Self.Left:=Mouse.CursorPos.X-CurX;
    Self.Top :=Mouse.CursorPos.Y-CurY;
  end else
  Begin
    CurX:=Mouse.CursorPos.X-Self.Left;
    CurY:=Mouse.CursorPos.Y-Self.Top;
  end;
end;

procedure TFormSelectDirectory.FormClose(Sender: TObject;
  var CloseAction: TCloseAction);
begin
  //AnimateClose(Self);
end;

procedure TFormSelectDirectory.FormResize(Sender: TObject);
begin
  FormRadial(Self, 10);
end;

procedure TFormSelectDirectory.FormShow(Sender: TObject);
begin
  Used:= False;
end;

procedure TFormSelectDirectory.BCButHaltClick(Sender: TObject);
begin
  Self.Close;
end;

procedure TFormSelectDirectory.BCButCancelMouseMove(Sender: TObject;
  Shift: TShiftState; X, Y: Integer);
begin
  ButtonRadialEffect(TBCButton(Sender), X,Y);
end;

procedure TFormSelectDirectory.BCButOKClick(Sender: TObject);
begin
  Used:= True;
  Self.Close;
end;

end.

